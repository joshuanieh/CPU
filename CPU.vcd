$date
	Thu Dec 30 13:00:02 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! cpu_mem_addr [31:0] $end
$var wire 256 " cpu_mem_data [255:0] $end
$var wire 1 # cpu_mem_enable $end
$var wire 1 $ cpu_mem_write $end
$var wire 256 % mem_cpu_data [255:0] $end
$var wire 1 & mem_cpu_ack $end
$var reg 1 ' Clk $end
$var reg 1 ( Reset $end
$var reg 1 ) Start $end
$var reg 27 * address [26:0] $end
$var reg 1 + flag $end
$var reg 4 , index [3:0] $end
$var reg 24 - tag [23:0] $end
$var integer 32 . counter [31:0] $end
$var integer 32 / i [31:0] $end
$var integer 32 0 j [31:0] $end
$var integer 32 1 outfile [31:0] $end
$var integer 32 2 outfile2 [31:0] $end
$scope module CPU $end
$var wire 1 3 Flush $end
$var wire 32 4 SE_21 [31:0] $end
$var wire 1 ' clk_i $end
$var wire 1 5 mem_ack_i $end
$var wire 256 6 mem_data_i [255:0] $end
$var wire 1 ( rst_i $end
$var wire 1 ) start_i $end
$var wire 32 7 tmpB [31:0] $end
$var wire 32 8 tmpA [31:0] $end
$var wire 32 9 pc_predicted [31:0] $end
$var wire 32 : pc_branch [31:0] $end
$var wire 32 ; pc_2 [31:0] $end
$var wire 32 < pc_1 [31:0] $end
$var wire 32 = pc_0 [31:0] $end
$var wire 1 > mem_write_o $end
$var wire 1 ? mem_enable_o $end
$var wire 256 @ mem_data_o [255:0] $end
$var wire 32 A mem_addr_o [31:0] $end
$var wire 32 B instr_2 [31:0] $end
$var wire 32 C instr_1 [31:0] $end
$var wire 10 D funct_3 [9:0] $end
$var wire 10 E funct_2 [9:0] $end
$var wire 1 F Stall $end
$var wire 32 G SE_3 [31:0] $end
$var wire 32 H SE_23 [31:0] $end
$var wire 32 I SE_22 [31:0] $end
$var wire 1 J RegWrite_tmp $end
$var wire 1 K RegWrite_5 $end
$var wire 1 L RegWrite_4 $end
$var wire 1 M RegWrite_3 $end
$var wire 1 N RegWrite_2 $end
$var wire 32 O RS2data_4 [31:0] $end
$var wire 32 P RS2data_32 [31:0] $end
$var wire 32 Q RS2data_31 [31:0] $end
$var wire 32 R RS2data_2 [31:0] $end
$var wire 5 S RS2addr_3 [4:0] $end
$var wire 5 T RS2addr_2 [4:0] $end
$var wire 32 U RS1data_32 [31:0] $end
$var wire 32 V RS1data_31 [31:0] $end
$var wire 32 W RS1data_2 [31:0] $end
$var wire 5 X RS1addr_3 [4:0] $end
$var wire 5 Y RS1addr_2 [4:0] $end
$var wire 32 Z RDdata_5_tmp [31:0] $end
$var wire 32 [ RDdata_5 [31:0] $end
$var wire 5 \ RDaddr_5_tmp [4:0] $end
$var wire 5 ] RDaddr_5 [4:0] $end
$var wire 5 ^ RDaddr_4 [4:0] $end
$var wire 5 _ RDaddr_3 [4:0] $end
$var wire 5 ` RDaddr_2 [4:0] $end
$var wire 1 a PCWrite_tmp $end
$var wire 1 b PCWrite $end
$var wire 7 c Op [6:0] $end
$var wire 1 d NoOp_tmp $end
$var wire 1 e NoOp $end
$var wire 1 f Miss_stall $end
$var wire 1 g MemtoReg_tmp $end
$var wire 1 h MemtoReg_5 $end
$var wire 1 i MemtoReg_4 $end
$var wire 1 j MemtoReg_3 $end
$var wire 1 k MemtoReg_2 $end
$var wire 1 l MemWrite_tmp $end
$var wire 1 m MemWrite_4 $end
$var wire 1 n MemWrite_3 $end
$var wire 1 o MemWrite_2 $end
$var wire 1 p MemRead_tmp $end
$var wire 1 q MemRead_4 $end
$var wire 1 r MemRead_3 $end
$var wire 1 s MemRead_2 $end
$var wire 32 t MemData_5 [31:0] $end
$var wire 32 u MemData_4 [31:0] $end
$var wire 32 v MUX_3 [31:0] $end
$var wire 2 w ForwardB [1:0] $end
$var wire 2 x ForwardA [1:0] $end
$var wire 1 y Equal $end
$var wire 1 z Branch_tmp $end
$var wire 1 { Branch $end
$var wire 1 | ALUSrc_3 $end
$var wire 1 } ALUSrc_2 $end
$var wire 32 ~ ALUResult_5 [31:0] $end
$var wire 32 !" ALUResult_4 [31:0] $end
$var wire 32 "" ALUResult_3 [31:0] $end
$var wire 2 #" ALUOp_3 [1:0] $end
$var wire 2 $" ALUOp_2 [1:0] $end
$var wire 3 %" ALUCrtl_3 [2:0] $end
$var reg 32 &" counter [31:0] $end
$scope module ALU $end
$var wire 32 '" data2_i [31:0] $end
$var wire 32 (" data1_i [31:0] $end
$var wire 3 )" ALUCtrl_i [2:0] $end
$var reg 32 *" data_o [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 10 +" funct_i [9:0] $end
$var wire 2 ," ALUOp_i [1:0] $end
$var wire 3 -" ALUCtrl_o [2:0] $end
$upscope $end
$scope module Control $end
$var wire 2 ." ALUOp_o [1:0] $end
$var wire 1 } ALUSrc_o $end
$var wire 1 z Branch_o $end
$var wire 1 p MemRead_o $end
$var wire 1 l MemWrite_o $end
$var wire 1 g MemtoReg_o $end
$var wire 1 e NoOp_i $end
$var wire 7 /" Op_i [6:0] $end
$var wire 1 J RegWrite_o $end
$upscope $end
$scope module EXMEM $end
$var wire 32 0" ALUResult_i [31:0] $end
$var wire 1 1" Miss_stall_i $end
$var wire 1 ' clk_i $end
$var wire 1 M RegWrite_i $end
$var wire 32 2" RS2data_i [31:0] $end
$var wire 5 3" RDaddr_i [4:0] $end
$var wire 1 j MemtoReg_i $end
$var wire 1 n MemWrite_i $end
$var wire 1 r MemRead_i $end
$var reg 32 4" ALUResult_o [31:0] $end
$var reg 1 q MemRead_o $end
$var reg 1 m MemWrite_o $end
$var reg 1 i MemtoReg_o $end
$var reg 5 5" RDaddr_o [4:0] $end
$var reg 32 6" RS2data_o [31:0] $end
$var reg 1 L RegWrite_o $end
$upscope $end
$scope module Forwarding_Unit $end
$var wire 5 7" RDaddrM_i [4:0] $end
$var wire 5 8" RDaddrW_i [4:0] $end
$var wire 1 L RegWriteM_i $end
$var wire 1 9" cA1 $end
$var wire 1 :" cA2 $end
$var wire 1 ;" cB1 $end
$var wire 1 <" cB2 $end
$var wire 2 =" tmpB [1:0] $end
$var wire 2 >" tmpA [1:0] $end
$var wire 1 K RegWriteW_i $end
$var wire 5 ?" RS2addr_i [4:0] $end
$var wire 5 @" RS1addr_i [4:0] $end
$var wire 2 A" ForwardB_o [1:0] $end
$var wire 2 B" ForwardA_o [1:0] $end
$upscope $end
$scope module Hazard_Detection_Unit $end
$var wire 1 d NoOp_o $end
$var wire 1 a PCWrite_o $end
$var wire 5 C" RS1addr_i [4:0] $end
$var wire 5 D" RS2addr_i [4:0] $end
$var wire 1 F Stall_o $end
$var wire 1 E" tmp $end
$var wire 5 F" RDaddr_i [4:0] $end
$var wire 1 r MemRead_i $end
$upscope $end
$scope module IDEX $end
$var wire 2 G" ALUOp_i [1:0] $end
$var wire 1 } ALUSrc_i $end
$var wire 1 s MemRead_i $end
$var wire 1 o MemWrite_i $end
$var wire 1 k MemtoReg_i $end
$var wire 1 H" Miss_stall_i $end
$var wire 5 I" RDaddr_i [4:0] $end
$var wire 5 J" RS1addr_i [4:0] $end
$var wire 5 K" RS2addr_i [4:0] $end
$var wire 1 N RegWrite_i $end
$var wire 1 ' clk_i $end
$var wire 10 L" funct_i [9:0] $end
$var wire 32 M" SE_i [31:0] $end
$var wire 32 N" RS2data_i [31:0] $end
$var wire 32 O" RS1data_i [31:0] $end
$var reg 2 P" ALUOp_o [1:0] $end
$var reg 1 | ALUSrc_o $end
$var reg 1 r MemRead_o $end
$var reg 1 n MemWrite_o $end
$var reg 1 j MemtoReg_o $end
$var reg 5 Q" RDaddr_o [4:0] $end
$var reg 5 R" RS1addr_o [4:0] $end
$var reg 32 S" RS1data_o [31:0] $end
$var reg 5 T" RS2addr_o [4:0] $end
$var reg 32 U" RS2data_o [31:0] $end
$var reg 1 M RegWrite_o $end
$var reg 32 V" SE_o [31:0] $end
$var reg 10 W" funct_o [9:0] $end
$upscope $end
$scope module IFID $end
$var wire 1 3 Flush_i $end
$var wire 1 X" Miss_stall_i $end
$var wire 1 Y" Stall_i $end
$var wire 1 ' clk_i $end
$var wire 32 Z" pc_i [31:0] $end
$var wire 32 [" instr_i [31:0] $end
$var reg 32 \" instr_o [31:0] $end
$var reg 32 ]" pc_o [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 ^" instr_o [31:0] $end
$var wire 32 _" addr_i [31:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 32 `" ALUResult_i [31:0] $end
$var wire 1 i MemtoReg_i $end
$var wire 1 a" Miss_stall_i $end
$var wire 5 b" RDaddr_i [4:0] $end
$var wire 1 L RegWrite_i $end
$var wire 1 ' clk_i $end
$var wire 32 c" MemData_i [31:0] $end
$var reg 32 d" ALUResult_o [31:0] $end
$var reg 32 e" MemData_o [31:0] $end
$var reg 1 h MemtoReg_o $end
$var reg 5 f" RDaddr_o [4:0] $end
$var reg 1 K RegWrite_o $end
$upscope $end
$scope module MUX_A $end
$var wire 32 g" data1_i [31:0] $end
$var wire 32 h" data2_i [31:0] $end
$var wire 1 i" select_i $end
$var wire 32 j" data_o [31:0] $end
$upscope $end
$scope module MUX_AA $end
$var wire 32 k" data1_i [31:0] $end
$var wire 32 l" data2_i [31:0] $end
$var wire 1 m" select_i $end
$var wire 32 n" data_o [31:0] $end
$upscope $end
$scope module MUX_ALUSrc $end
$var wire 32 o" data2_i [31:0] $end
$var wire 1 | select_i $end
$var wire 32 p" data_o [31:0] $end
$var wire 32 q" data1_i [31:0] $end
$upscope $end
$scope module MUX_B $end
$var wire 32 r" data1_i [31:0] $end
$var wire 32 s" data2_i [31:0] $end
$var wire 1 t" select_i $end
$var wire 32 u" data_o [31:0] $end
$upscope $end
$scope module MUX_BB $end
$var wire 32 v" data1_i [31:0] $end
$var wire 32 w" data2_i [31:0] $end
$var wire 1 x" select_i $end
$var wire 32 y" data_o [31:0] $end
$upscope $end
$scope module MUX_WB $end
$var wire 32 z" data1_i [31:0] $end
$var wire 32 {" data2_i [31:0] $end
$var wire 1 h select_i $end
$var wire 32 |" data_o [31:0] $end
$upscope $end
$scope module MUX_Zero $end
$var wire 32 }" data1_i [31:0] $end
$var wire 32 ~" data2_i [31:0] $end
$var wire 1 3 select_i $end
$var wire 32 !# data_o [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 b PCWrite_i $end
$var wire 1 ' clk_i $end
$var wire 32 "# pc_i [31:0] $end
$var wire 1 ( rst_i $end
$var wire 1 ## stall_i $end
$var wire 1 ) start_i $end
$var reg 32 $# pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 %# RDaddr_i [4:0] $end
$var wire 32 &# RDdata_i [31:0] $end
$var wire 5 '# RS1addr_i [4:0] $end
$var wire 5 (# RS2addr_i [4:0] $end
$var wire 1 K RegWrite_i $end
$var wire 1 ' clk_i $end
$var wire 32 )# RS2data_o [31:0] $end
$var wire 32 *# RS1data_o [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 32 +# data_i [31:0] $end
$var wire 32 ,# data_o [31:0] $end
$var wire 32 -# data_9 [31:0] $end
$var wire 32 .# data_678 [31:0] $end
$var wire 32 /# data_10 [31:0] $end
$upscope $end
$scope module dcache $end
$var wire 1 0# cache_dirty $end
$var wire 1 1# cache_sram_enable $end
$var wire 4 2# cache_sram_index [3:0] $end
$var wire 1 3# cache_sram_write $end
$var wire 1 ' clk_i $end
$var wire 1 q cpu_MemRead_i $end
$var wire 1 m cpu_MemWrite_i $end
$var wire 32 4# cpu_addr_i [31:0] $end
$var wire 32 5# cpu_data_i [31:0] $end
$var wire 32 6# cpu_data_o [31:0] $end
$var wire 1 7# cpu_req $end
$var wire 1 f cpu_stall_o $end
$var wire 1 5 mem_ack_i $end
$var wire 256 8# mem_data_i [255:0] $end
$var wire 256 9# mem_data_o [255:0] $end
$var wire 1 ? mem_enable_o $end
$var wire 1 > mem_write_o $end
$var wire 256 :# r_hit_data [255:0] $end
$var wire 1 ( rst_i $end
$var wire 1 ;# write_hit $end
$var wire 1 <# sram_valid $end
$var wire 22 =# sram_tag [21:0] $end
$var wire 1 ># sram_dirty $end
$var wire 25 ?# sram_cache_tag [24:0] $end
$var wire 256 @# sram_cache_data [255:0] $end
$var wire 32 A# mem_addr_o [31:0] $end
$var wire 1 B# hit $end
$var wire 23 C# cpu_tag [22:0] $end
$var wire 5 D# cpu_offset [4:0] $end
$var wire 4 E# cpu_index [3:0] $end
$var wire 25 F# cache_sram_tag [24:0] $end
$var wire 256 G# cache_sram_data [255:0] $end
$var reg 1 H# cache_write $end
$var reg 32 I# cpu_data [31:0] $end
$var reg 1 J# mem_enable $end
$var reg 1 K# mem_write $end
$var reg 3 L# state [2:0] $end
$var reg 256 M# w_hit_data [255:0] $end
$var reg 1 N# write_back $end
$scope module dcache_sram $end
$var wire 4 O# addr_i [3:0] $end
$var wire 1 ' clk_i $end
$var wire 256 P# data_i [255:0] $end
$var wire 1 1# enable_i $end
$var wire 1 B# hit_o $end
$var wire 1 ( rst_i $end
$var wire 25 Q# tag_i [24:0] $end
$var wire 1 3# write_i $end
$var wire 25 R# tag_o [24:0] $end
$var wire 256 S# data_o [255:0] $end
$var integer 32 T# i [31:0] $end
$var integer 32 U# j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Data_Memory $end
$var wire 1 & ack_o $end
$var wire 32 V# addr_i [31:0] $end
$var wire 1 ' clk_i $end
$var wire 256 W# data_i [255:0] $end
$var wire 256 X# data_o [255:0] $end
$var wire 1 # enable_i $end
$var wire 1 ( rst_i $end
$var wire 1 $ write_i $end
$var wire 27 Y# addr [26:0] $end
$var reg 4 Z# count [3:0] $end
$var reg 256 [# data [255:0] $end
$var reg 2 \# state [1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 \#
bx [#
b0 Z#
bz Y#
bx X#
bz W#
bz V#
b10 U#
b10000 T#
bx S#
bx R#
b1xxxxxxxxxxxxxxxxxxxxxxxx Q#
bx P#
bx O#
0N#
bx M#
b0 L#
0K#
0J#
bx I#
0H#
bx G#
b1xxxxxxxxxxxxxxxxxxxxxxxx F#
bx E#
bx D#
bx C#
1B#
bx00000 A#
bx @#
bx ?#
x>#
bx =#
x<#
x;#
bx :#
bx 9#
bz 8#
x7#
bx 6#
bx 5#
bx 4#
x3#
bx 2#
x1#
x0#
bx /#
bx .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
b0 $#
z##
b100 "#
b100 !#
bx ~"
b100 }"
bx |"
bx {"
bx z"
bx y"
xx"
bx w"
bx v"
bx u"
xt"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
xm"
bx l"
bx k"
bx j"
xi"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
za"
bx `"
b0 _"
bx ^"
bx ]"
bx \"
bx ["
b0 Z"
xY"
zX"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
zH"
bx G"
bx F"
xE"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
b0x >"
b0x ="
x<"
x;"
x:"
x9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
z1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
x}
x|
0{
xz
xy
bx x
bx w
bx v
bx u
bx t
0s
xr
xq
xp
0o
xn
xm
xl
0k
xj
xi
xh
xg
0f
xe
xd
bx c
xb
xa
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
0N
xM
xL
xK
xJ
bx I
bx0 H
bx G
xF
bx E
bx D
bx C
bx B
bx00000 A
bx @
0?
0>
b100 =
b0 <
bx ;
bx :
b100 9
bx 8
bx 7
bz 6
z5
bx 4
03
bx 2
bx 1
bx 0
bx /
b0 .
bx -
bx ,
x+
bx *
0)
1(
0'
0&
bx %
z$
z#
bz "
bz !
$end
#12
b0 G#
b0 P#
b0 M#
b0 u
b0 c"
b0 6#
b0 I#
b0 ""
b0 *"
b0 0"
b0 =#
b0 v
b0 '"
b0 p"
0>#
0<#
0x"
0t"
0m"
0i"
0}
0l
0g
0p
0J
b0 U
b0 ("
b0 n"
b0 P
b0 2"
b0 q"
b0 y"
b0 ?#
b0 R#
b0 :#
b0 @
b0 9#
b0 @#
b0 S#
b0 w
b0 A"
b0 x
b0 B"
0Y"
1a
0z
b0 $"
b0 ."
b0 G"
b0 :
b0 ~"
b0 H
b0 8
b0 j"
b0 k"
b0 7
b0 u"
b0 v"
b0 A
b0 A#
03#
09"
0;"
b0 ="
b0 >"
b11 %"
b11 )"
b11 -"
0F
0d
1e
1y
b0 R
b0 N"
b0 )#
1E"
b0 W
b0 O"
b0 *#
b0 I
b0 M"
b0 ,#
1b
b0 [
b0 h"
b0 s"
b0 &#
b0 ]
b0 8"
b0 %#
b0 Z
b0 |"
b0 C#
b0 2#
b0 O#
b0 E#
b0 D#
b1000000000000000000000000 F#
b1000000000000000000000000 Q#
00#
0;#
01#
07#
0<"
0:"
b0 E
b0 L"
b0 `
b0 I"
b0 T
b0 D"
b0 K"
b0 (#
b0 Y
b0 C"
b0 J"
b0 '#
b0 c
b0 /"
b0 .#
b0 -#
b0 /#
b101 2
b11 1
b0 &"
b0 \
b0 f"
b0 t
b0 e"
b0 {"
b0 ~
b0 d"
b0 z"
0h
0K
b0 ^
b0 5"
b0 7"
b0 b"
b0 O
b0 6"
b0 5#
b0 !"
b0 4"
b0 `"
b0 l"
b0 w"
b0 4#
0m
0q
0i
0L
b0 _
b0 3"
b0 F"
b0 Q"
b0 S
b0 ?"
b0 T"
b0 X
b0 @"
b0 R"
b0 D
b0 +"
b0 W"
b0 G
b0 V"
b0 o"
b0 Q
b0 U"
b0 r"
b0 V
b0 S"
b0 g"
0|
b0 #"
b0 ,"
b0 P"
0n
0r
0j
0M
b0 ;
b0 ]"
b0 4
b0 +#
b0 B
b0 \"
b10 0
b10011110000011 C
b10011110000011 ["
b10011110000011 ^"
b1000000000 /
1)
0(
#25
1}
1g
1p
1J
0e
b10 E
b10 L"
b1111 `
b1111 I"
b11 c
b11 /"
b1111 -#
b10000000111 /#
b10011110000011 4
b10011110000011 +#
b10011110000011 B
b10011110000011 \"
b1 &"
b1 .
0+
1'
#50
0'
#75
0E"
b10 &"
b1111 _
b1111 3"
b1111 F"
b1111 Q"
b10 D
b10 +"
b10 W"
1|
b10 .
1'
#100
0'
#125
b1111 ^
b1111 5"
b1111 7"
b1111 b"
b11 &"
b11 .
1'
#150
0'
#175
b1111 ]
b1111 8"
b1111 %#
b100 &"
b1111 \
b1111 f"
b100 .
1'
#200
0'
#225
b101 &"
b101 .
1'
#250
0'
#275
b110 &"
b110 .
1'
#300
0'
#325
b111 &"
b111 .
1'
#350
0'
#375
b1000 &"
b1000 .
1'
#400
0'
#425
b1001 &"
b1001 .
1'
#450
0'
#475
b1010 &"
b1010 .
1'
#500
0'
#525
b1011 &"
b1011 .
1'
#550
0'
#575
b1100 &"
b1100 .
1'
#600
0'
#625
b1101 &"
b1101 .
1'
#650
0'
#675
b1110 &"
b1110 .
1'
#700
0'
#725
b1111 &"
b1111 .
1'
#750
0'
#775
b10000 &"
b10000 .
1'
#800
0'
#825
b10001 &"
b10001 .
1'
#850
0'
#875
b10010 &"
b10010 .
1'
#900
0'
#925
b10011 &"
b10011 .
1'
#950
0'
#975
b10100 &"
b10100 .
1'
#1000
0'
#1025
b10101 &"
b10101 .
1'
#1050
0'
#1075
b10110 &"
b10110 .
1'
#1100
0'
#1125
b10111 &"
b10111 .
1'
#1150
0'
#1175
b11000 &"
b11000 .
1'
#1200
0'
#1225
b11001 &"
b11001 .
1'
#1250
0'
#1275
b11010 &"
b11010 .
1'
#1300
0'
#1325
b11011 &"
b11011 .
1'
#1350
0'
#1375
b11100 &"
b11100 .
1'
#1400
0'
#1425
b11101 &"
b11101 .
1'
#1450
0'
#1475
b11110 &"
b11110 .
1'
#1500
0'
#1525
b11111 &"
b11111 .
1'
#1550
0'
#1575
b100000 &"
b100000 .
1'
#1600
0'
#1625
b100001 &"
b100001 .
1'
#1650
0'
#1675
b100010 &"
b100010 .
1'
#1700
0'
#1725
b100011 &"
b100011 .
1'
#1750
0'
#1775
b100100 &"
b100100 .
1'
#1800
0'
#1825
b100101 &"
b100101 .
1'
#1850
0'
#1875
b100110 &"
b100110 .
1'
#1900
0'
#1925
b100111 &"
b100111 .
1'
#1950
0'
#1975
b101000 &"
b101000 .
1'
#2000
0'
#2025
b101001 &"
b101001 .
1'
#2050
0'
#2075
b101010 &"
b101010 .
1'
#2100
0'
#2125
b101011 &"
b101011 .
1'
#2150
0'
#2175
b101100 &"
b101100 .
1'
#2200
0'
#2225
b101101 &"
b101101 .
1'
#2250
0'
#2275
b101110 &"
b101110 .
1'
#2300
0'
#2325
b101111 &"
b101111 .
1'
#2350
0'
#2375
b110000 &"
b110000 .
1'
#2400
0'
#2425
b110001 &"
b110001 .
1'
#2450
0'
#2475
b110010 &"
b110010 .
1'
#2500
0'
#2525
b110011 &"
b110011 .
1'
#2550
0'
#2575
b110100 &"
b110100 .
1'
#2600
0'
#2625
b110101 &"
b110101 .
1'
#2650
0'
#2675
b110110 &"
b110110 .
1'
#2700
0'
#2725
b110111 &"
b110111 .
1'
#2750
0'
#2775
b111000 &"
b111000 .
1'
#2800
0'
#2825
b111001 &"
b111001 .
1'
#2850
0'
#2875
b111010 &"
b111010 .
1'
#2900
0'
#2925
b111011 &"
b111011 .
1'
#2950
0'
#2975
b111100 &"
b111100 .
1'
#3000
0'
#3025
b111101 &"
b111101 .
1'
#3050
0'
#3075
b111110 &"
b111110 .
1'
#3100
0'
#3125
b111111 &"
b111111 .
1'
#3150
0'
#3175
b1000000 &"
b1000000 .
1'
#3200
0'
#3225
b1000001 &"
b1000001 .
1'
#3250
0'
#3275
b1000010 &"
b1000010 .
1'
#3300
0'
#3325
b1000011 &"
b1000011 .
1'
#3350
0'
#3375
b1000100 &"
b1000100 .
1'
#3400
0'
#3425
b1000101 &"
b1000101 .
1'
#3450
0'
#3475
b1000110 &"
b1000110 .
1'
#3500
0'
#3525
b1000111 &"
b1000111 .
1'
#3550
0'
#3575
b1001000 &"
b1001000 .
1'
#3600
0'
#3625
b1001001 &"
b1001001 .
1'
#3650
0'
#3675
b1001010 &"
b1001010 .
1'
#3700
0'
#3725
b1001011 &"
b1001011 .
1'
#3750
0'
#3775
b1001100 &"
b1001100 .
1'
#3800
0'
#3825
b1001101 &"
b1001101 .
1'
#3850
0'
#3875
b1001110 &"
b1001110 .
1'
#3900
0'
#3925
b1001111 &"
b1001111 .
1'
#3950
0'
#3975
b1010000 &"
b1010000 .
1'
#4000
0'
#4025
b1010001 &"
b1010001 .
1'
#4050
0'
#4075
b1010010 &"
b1010010 .
1'
#4100
0'
#4125
b1010011 &"
b1010011 .
1'
#4150
0'
#4175
b1010100 &"
b1010100 .
1'
#4200
0'
#4225
b1010101 &"
b1010101 .
1'
#4250
0'
#4275
b1010110 &"
b1010110 .
1'
#4300
0'
#4325
b1010111 &"
b1010111 .
1'
#4350
0'
#4375
b1011000 &"
b1011000 .
1'
#4400
0'
#4425
b1011001 &"
b1011001 .
1'
#4450
0'
#4475
b1011010 &"
b1011010 .
1'
#4500
0'
#4525
b1011011 &"
b1011011 .
1'
#4550
0'
#4575
b1011100 &"
b1011100 .
1'
#4600
0'
#4625
b1011101 &"
b1011101 .
1'
#4650
0'
#4675
b1011110 &"
b1011110 .
1'
#4700
0'
#4725
b1011111 &"
b1011111 .
1'
#4750
0'
#4775
b1100000 &"
b1100000 .
1'
#4800
0'
#4825
b1100001 &"
b1100001 .
1'
#4850
0'
#4875
b1100010 &"
b1100010 .
1'
#4900
0'
#4925
b1100011 &"
b1100011 .
1'
#4950
0'
#4975
b1100100 &"
b1100100 .
1'
#5000
0'
#5025
b1100101 &"
b1100101 .
1'
#5050
0'
#5075
b1100110 &"
b1100110 .
1'
#5100
0'
#5125
b1100111 &"
b1100111 .
1'
#5150
0'
#5175
b1101000 &"
b1101000 .
1'
#5200
0'
#5225
b1101001 &"
b1101001 .
1'
#5250
0'
#5275
b1101010 &"
b1101010 .
1'
#5300
0'
#5325
b1101011 &"
b1101011 .
1'
#5350
0'
#5375
b1101100 &"
b1101100 .
1'
#5400
0'
#5425
b1101101 &"
b1101101 .
1'
#5450
0'
#5475
b1101110 &"
b1101110 .
1'
#5500
0'
#5525
b1101111 &"
b1101111 .
1'
#5550
0'
#5575
b1110000 &"
b1110000 .
1'
#5600
0'
#5625
b1110001 &"
b1110001 .
1'
#5650
0'
#5675
b1110010 &"
b1110010 .
1'
#5700
0'
#5725
b1110011 &"
b1110011 .
1'
#5750
0'
#5775
b1110100 &"
b1110100 .
1'
#5800
0'
#5825
b1110101 &"
b1110101 .
1'
#5850
0'
#5875
b1110110 &"
b1110110 .
1'
#5900
0'
#5925
b1110111 &"
b1110111 .
1'
#5950
0'
#5975
b1111000 &"
b1111000 .
1'
#6000
0'
#6025
b1111001 &"
b1111001 .
1'
#6050
0'
#6075
b1111010 &"
b1111010 .
1'
#6100
0'
#6125
b1111011 &"
b1111011 .
1'
#6150
0'
#6175
b1111100 &"
b1111100 .
1'
#6200
0'
#6225
b1111101 &"
b1111101 .
1'
#6250
0'
#6275
b1111110 &"
b1111110 .
1'
#6300
0'
#6325
b1111111 &"
b1111111 .
1'
#6350
0'
#6375
b10000000 &"
b10000000 .
1'
#6400
0'
#6425
b10000001 &"
b10000001 .
1'
#6450
0'
#6475
b10000010 &"
b10000010 .
1'
#6500
0'
#6525
b10000011 &"
b10000011 .
1'
#6550
0'
#6575
b10000100 &"
b10000100 .
1'
#6600
0'
#6625
b10000101 &"
b10000101 .
1'
#6650
0'
#6675
b10000110 &"
b10000110 .
1'
#6700
0'
#6725
b10000111 &"
b10000111 .
1'
#6750
0'
#6775
b10001000 &"
b10001000 .
1'
#6800
0'
#6825
b10001001 &"
b10001001 .
1'
#6850
0'
#6875
b10001010 &"
b10001010 .
1'
#6900
0'
#6925
b10001011 &"
b10001011 .
1'
#6950
0'
#6975
b10001100 &"
b10001100 .
1'
#7000
0'
#7025
b10001101 &"
b10001101 .
1'
#7050
0'
#7075
b10001110 &"
b10001110 .
1'
#7100
0'
#7125
b10001111 &"
b10001111 .
1'
#7150
0'
#7175
b10010000 &"
b10010000 .
1'
#7200
0'
#7225
b10010001 &"
b10010001 .
1'
#7250
0'
#7275
b10010010 &"
b10010010 .
1'
#7300
0'
#7325
b10010011 &"
b10010011 .
1'
#7350
0'
#7375
b10010100 &"
b10010100 .
1'
#7400
0'
#7425
b10010101 &"
b10010101 .
1'
#7450
0'
#7475
b10010110 &"
b10010110 .
1'
#7500
0'
#7525
b10010111 &"
b10010111 .
1'
#7550
0'
#7575
b10011000 &"
b10011000 .
1'
#7600
0'
#7625
b10011001 &"
b10011001 .
1'
#7650
0'
#7675
b10011010 &"
b10011010 .
1'
#7700
0'
#7725
b10011011 &"
b10011011 .
1'
#7750
0'
#7775
b10011100 &"
b10011100 .
1'
#7800
0'
#7825
b10011101 &"
b10011101 .
1'
#7850
0'
#7875
b10011110 &"
b10011110 .
1'
#7900
0'
#7925
b10011111 &"
b10011111 .
1'
#7950
0'
#7975
b10100000 &"
b10100000 .
1'
#8000
0'
#8025
b10100001 &"
b10100001 .
1'
#8050
0'
#8075
b10100010 &"
b10100010 .
1'
#8100
0'
#8125
b10100011 &"
b10100011 .
1'
#8150
0'
#8175
b10100100 &"
b10100100 .
1'
#8200
0'
#8225
b10100101 &"
b10100101 .
1'
#8250
0'
#8275
b10100110 &"
b10100110 .
1'
#8300
0'
#8325
b10100111 &"
b10100111 .
1'
#8350
0'
#8375
b10101000 &"
b10101000 .
1'
#8400
0'
#8425
b10101001 &"
b10101001 .
1'
#8450
0'
#8475
b10101010 &"
b10101010 .
1'
#8500
0'
#8525
b10101011 &"
b10101011 .
1'
#8550
0'
#8575
b10101100 &"
b10101100 .
1'
#8600
0'
#8625
b10101101 &"
b10101101 .
1'
#8650
0'
#8675
b10101110 &"
b10101110 .
1'
#8700
0'
#8725
b10101111 &"
b10101111 .
1'
#8750
0'
#8775
b10110000 &"
b10110000 .
1'
#8800
0'
#8825
b10110001 &"
b10110001 .
1'
#8850
0'
#8875
b10110010 &"
b10110010 .
1'
#8900
0'
#8925
b10110011 &"
b10110011 .
1'
#8950
0'
#8975
b10110100 &"
b10110100 .
1'
#9000
0'
#9025
b10110101 &"
b10110101 .
1'
#9050
0'
#9075
b10110110 &"
b10110110 .
1'
#9100
0'
#9125
b10110111 &"
b10110111 .
1'
#9150
0'
#9175
b10111000 &"
b10111000 .
1'
#9200
0'
#9225
b10111001 &"
b10111001 .
1'
#9250
0'
#9275
b10111010 &"
b10111010 .
1'
#9300
0'
#9325
b10111011 &"
b10111011 .
1'
#9350
0'
#9375
b10111100 &"
b10111100 .
1'
#9400
0'
#9425
b10111101 &"
b10111101 .
1'
#9450
0'
#9475
b10111110 &"
b10111110 .
1'
#9500
0'
#9525
b10111111 &"
b10111111 .
1'
#9550
0'
#9575
b11000000 &"
b11000000 .
1'
#9600
0'
#9625
b11000001 &"
b11000001 .
1'
#9650
0'
#9675
b11000010 &"
b11000010 .
1'
#9700
0'
#9725
b11000011 &"
b11000011 .
1'
#9750
0'
#9775
b11000100 &"
b11000100 .
1'
#9800
0'
#9825
b11000101 &"
b11000101 .
1'
#9850
0'
#9875
b11000110 &"
b11000110 .
1'
#9900
0'
#9925
b11000111 &"
b11000111 .
1'
#9950
0'
#9975
b11001000 &"
b11001000 .
1'
#10000
0'
#10025
b11001001 &"
b11001001 .
b1111 *
b1111 ,
b0 -
b10000 /
b10 0
1'
#10050
0'
#10075
b11001010 &"
1'
